from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from tgbot.FSMC.chat import SendMessageFSM
from PlayerokAPI.common.account import Account
from tgbot.core.loader import bot
from loguru import logger
from typing import Dict, Any
from utils.tools import delete_file

chat_router = Router(name="chat")

@chat_router.callback_query(F.data.startswith("send_message_"))
async def process_send_message(callback_query: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
    Args:
        callback_query (CallbackQuery): –í—Ö–æ–¥—è—â–∏–π callback-–∑–∞–ø—Ä–æ—Å.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    response_message = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")

    await state.update_data(
        playerok_chat_id=callback_query.data.split("_")[2],
        message_id=response_message.message_id,
        chat_id=callback_query.from_user.id,
    )

    await state.set_state(SendMessageFSM.message)

@chat_router.message(SendMessageFSM.message)
async def send_message(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/—Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.

    –£–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    Returns:
        None: –ù–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    content_type = message.content_type
    data: Dict[str, Any] = await state.get_data()

    if content_type not in ["text", "photo"]:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return

    await bot.delete_message(data["chat_id"], data["message_id"])

    try:
        if content_type == "photo":
            await message.bot.download(file=message.photo[-1].file_id, destination="images/image.jpg")
            await Account().send_image(data["playerok_chat_id"], file_name="image.jpg", local_path="images/")
            await message.bot.send_photo(chat_id=data["chat_id"], photo=message.photo[-1].file_id, caption=f"<i><b>ü§ñ –¢—ã:</b></i> <i>*–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*</i>")
            await delete_file("images/image.jpg")
        else:
            message_text: str = message.text
            await Account().send_message(data["playerok_chat_id"], message_text)
            await message.answer(f"<i><b>ü§ñ –¢—ã:</b></i> <code>{message_text}</code>")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text if content_type == 'text' else '*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ*'} –≤ —á–∞—Ç {data['playerok_chat_id']}")

    except Exception as error:
        error_message = "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>" if content_type == "text" else "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>"
        await message.answer(f"{error_message}\n<code>{message.text if content_type == 'text' else ''}</code>")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è / –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error}")
    finally:
        await state.clear()
